// Global variables for the simulation
var h=.005,context,particleList=[],frametime,starttime,width,height,startCoords=[-1,-1],endCoords=[-1,-1],newMass=1e3,onControlBox=!1,shiftDown=!1,trailsEnabled=!1,currentParticleType="matter",gravityFieldEnabled=!1,showParticleNames=!1;

// NEW: Zoom and Pan variables
var zoomLevel = 1.0;
var panX = 0;
var panY = 0;

// NEW: Magnetosphere variables
var showMagnetospheres = false;
var magnetosphereList = [];

// NEW: Orbit variables
var showOrbits = false;

// NEW: Gravity Well variable
var showGravityWells = false;

// NEW: Variable global para controlar la visibilidad de la masa
var showParticleMass = false;

// Initializes the canvas and event listeners
function init(){
    var t=document.getElementById("canvas"),e=document.getElementById("controlbox");
    var visibleFactor = 1;

    t.width = (window.innerWidth - 30) * visibleFactor;
    t.height = (window.innerHeight - 20) * visibleFactor;
    width=t.width;
    height=t.height;
    context=t.getContext("2d");

    window.addEventListener("mousedown",mouseDownListener,!1);
    window.addEventListener('wheel', mouseWheelListener, { passive: false });
    e.onmouseover=function(){onControlBox=!0};
    e.onmouseout=function(){onControlBox=!1};
}

// Main simulation loop
function main(){starttime=Date.now(),integrate(),draw(),frametime=Date.now()-starttime}

// Mouse down event listener
function mouseDownListener(t){
    onControlBox||(
        shiftDown=t.shiftKey,
        startCoords[0]=t.clientX,
        startCoords[1]=t.clientY,
        endCoords[0]=t.clientX,
        endCoords[1]=t.clientY,
        window.addEventListener("mousemove",mouseMoveListener,!1),
        window.addEventListener("mouseup",mouseUpListener,!1)
    )
}

// Mouse move event listener
function mouseMoveListener(t){endCoords[0]=t.clientX,endCoords[1]=t.clientY}

// Mouse up event listener
function mouseUpListener(t){
    window.removeEventListener("mousemove",mouseMoveListener);
    window.removeEventListener("mouseup",mouseUpListener);

    if (!t.shiftKey && !shiftDown) {
        var worldStartX = (startCoords[0] - panX) / zoomLevel;
        var worldStartY = (startCoords[1] - panY) / zoomLevel;
        var worldEndX = (endCoords[0] - panX) / zoomLevel;
        var worldEndY = (endCoords[1] - panY) / zoomLevel;

        particleList.push(new Particle(newMass, worldStartX, worldStartY, (worldEndX - worldStartX), (worldEndY - worldStartY), currentParticleType, "New Particle"));
    } else if (t.shiftKey && shiftDown) {
        var screenDx = endCoords[0] - startCoords[0];
        var screenDy = endCoords[1] - startCoords[1];

        panX += screenDx;
        panY += screenDy;
    }
    startCoords=[-1,-1];
    endCoords=[-1,-1];
}

// Mouse wheel listener for zoom
function mouseWheelListener(event) {
    event.preventDefault();

    var scaleFactor = 1.1;
    var mouseX = event.clientX;
    var mouseY = event.clientY;

    var delta = event.deltaY > 0 ? 1 / scaleFactor : scaleFactor;

    var worldX = (mouseX - panX) / zoomLevel;
    var worldY = (mouseY - panY) / zoomLevel;

    zoomLevel *= delta;

    panX = mouseX - worldX * zoomLevel;
    panY = mouseY - worldY * zoomLevel;

    main();
}

// Sets the mass for new particles
function setNewMass(t){newMass=t}

// Toggles particle trails
function toggleTrails(){trailsEnabled=!trailsEnabled}

// Toggles particle type (matter/antimatter)
function toggleParticleType(){currentParticleType=currentParticleType=="matter"?"antimatter":"matter",document.getElementById("particleTypeBtn").innerHTML=currentParticleType=="matter"?"Matter":"Antimatter"}

// Toggles gravitational field visualization
var gravityFieldMode = 0;
function toggleGravityField(){
    gravityFieldMode = (gravityFieldMode + 1) % 3;
    gravityFieldEnabled = gravityFieldMode > 0;
    document.getElementById("gravityFieldBtn").innerHTML = 
        gravityFieldMode === 0 ? "Show Field" : 
        gravityFieldMode === 1 ? "Show Arrows Field" : "Show Grid Field";
}

// Toggles particle name display
function toggleParticleNames(){showParticleNames=!showParticleNames}

// Toggles magnetosphere visibility
function toggleMagnetospheres() {
    showMagnetospheres = !showMagnetospheres;
}

// Toggles orbit visibility
function toggleOrbits() {
    showOrbits = !showOrbits;
}

// Function to clear all particle orbit paths
function clearAllParticleOrbits() {
    for (var i = 0; i < particleList.length; i++) {
        particleList[i].path = [];
    }
}

// Toggles gravity well visibility
function toggleGravityWells() {
    showGravityWells = !showGravityWells;
}

// Toggles particle mass display
function toggleParticleMass() {
    showParticleMass = !showParticleMass;
}

// Integrates particle physics
function integrate(){
    // Calculate accelerations
    for(var t=0;t<particleList.length;t++){
        var e=particleList[t];e.ax=0,e.ay=0;
        for(var o=0;o<particleList.length;o++){
            if(t!==o){
                var r=particleList[o],i=r.x-e.x,s=r.y-e.y,a=Math.sqrt(i*i+s*s);
                if(a>1e-5){
                    var n=e.type==r.type?1:-1;
                    // Increased gravity for black holes
                    var forceMultiplier = r.isBlackHole ? 10 : 1;
                    e.ax+=n*r.mass*i/(a*a*a)*forceMultiplier;
                    e.ay+=n*r.mass*s/(a*a*a)*forceMultiplier;
                    
                    // Absorb particles that cross event horizon
                    if (r.isBlackHole && a < r.eventHorizonRadius) {
                        e.x = r.x;
                        e.y = r.y;
                        e.vx = r.vx;
                        e.vy = r.vy;
                    }
                }
            }
        }
    }

    // Update velocities and positions
    for(var c=[],l=0;l<particleList.length;l++){
        var d=particleList[l];
        d.vx+=d.ax*h;
        d.vy+=d.ay*h;
        d.x+=d.vx*h;
        d.y+=d.vy*h;

        if (showOrbits) {
            d.path.push({x: d.x, y: d.y});
            if (d.path.length > d.pathLength) {
                d.path.shift();
            }
        }
    }

    // Clear and regenerate magnetospheres
    magnetosphereList = [];
    for (var i = 0; i < particleList.length; i++) {
        var p = particleList[i];
        if (p.type === "matter" && p.mass > 10000) {
            magnetosphereList.push(new Magnetosphere(p, p.mass / 100, "rgba(0, 100, 255, 0.2)"));
        }
    }

    // Handle collisions (merging particles)
    for(var p=new Array(particleList.length).fill(!1),u=0;u<particleList.length;u++){
        if(!p[u]){
            var m=particleList[u];
            for(var f=u+1;f<particleList.length;f++){
                if(!p[f]){
                    var g=particleList[f],v=g.x-m.x,y=g.y-m.y,b=Math.sqrt(v*v+y*y);
                    if(b<m.radius/1.5+g.radius/1.5){
                        p[u]=!0,p[f]=!0;
                        var w=m.mass+g.mass,x=(m.x*m.mass+g.x*g.mass)/w,P=(m.y*m.mass+g.y*g.mass)/w,C=(m.vx*m.mass+g.vx*g.mass)/w,A=(m.vy*m.mass+g.vy*g.mass)/w;
                        // When merging with black hole, result is always black hole
                        var mergedType = (m.isBlackHole || g.isBlackHole) ? "blackhole" : (m.type==g.type?m.type:"matter");
                        c.push(new Particle(w,x,P,C,A,mergedType,"Merged Particle"));
                        break
                    }
                }
            }
        }
    }

    // Filter out collided particles and add new ones
    for(var S=[],k=0;k<particleList.length;k++)!p[k]&&particleList[k].x>=-50&&particleList[k].y>=-50&&particleList[k].x<=width+50&&particleList[k].y<=height+50&&S.push(particleList[k]);
    particleList=S.concat(c);
}

// Draws all elements on the canvas
function draw(){
    trailsEnabled?(context.fillStyle="rgba(0,0,0,0.05)",context.fillRect(0,0,width,height)):context.clearRect(0,0,width,height);

    context.save();
    context.translate(panX, panY);
    context.scale(zoomLevel, zoomLevel);

    // Draw the drag line for creating new particles
    var worldDragStartX = (startCoords[0] - panX) / zoomLevel;
    var worldDragStartY = (startCoords[1] - panY) / zoomLevel;
    var worldDragEndX = (endCoords[0] - panX) / zoomLevel;
    var worldDragEndY = (endCoords[1] - panY) / zoomLevel;

    context.beginPath();
    context.moveTo(worldDragStartX, worldDragStartY);
    context.lineTo(worldDragEndX, worldDragEndY);
    context.strokeStyle="blue";
    context.lineWidth=2 / zoomLevel;
    context.stroke();

    // Draw gravity field if enabled
    if(gravityFieldEnabled){
        var gridSize = 10;
        var lineWidth = 1 / zoomLevel;
        
        var worldViewLeft = Math.max(0, (0 - panX) / zoomLevel);
        var worldViewTop = Math.max(0, (0 - panY) / zoomLevel);
        var worldViewRight = Math.min(width, (width - panX) / zoomLevel);
        var worldViewBottom = Math.min(height, (height - panY) / zoomLevel);

        context.beginPath();
        context.strokeStyle = "rgba(100, 100, 255, 0.5)";
        context.lineWidth = lineWidth;
        
        for(var y = worldViewTop; y < worldViewBottom; y += gridSize){
            var points = [];
            for(var x = worldViewLeft; x <= worldViewRight; x += 5){
                var displacedX = x;
                var displacedY = y;
                
                for(var i = 0; i < particleList.length; i++){
                    var p = particleList[i];
                    var dx = p.x - x;
                    var dy = p.y - y;
                    var distSq = dx*dx + dy*dy;
                    
                    if(distSq < 10000 && distSq > 100){
                        var dist = Math.sqrt(distSq);
                        var force = p.mass / distSq * (p.type === "matter" ? 1 : -1);
                        var displacement = Math.min(20, force * 1000 / dist);
                        
                        displacedX += dx * displacement / dist;
                        displacedY += dy * displacement / dist;
                    }
                }
                
                points.push({x: displacedX, y: displacedY});
            }
            
            if(points.length > 1){
                context.moveTo(points[0].x, points[0].y);
                for(var j = 1; j < points.length; j++){
                    context.lineTo(points[j].x, points[j].y);
                }
            }
        }
        context.stroke();
        
        context.beginPath();
        context.strokeStyle = "rgba(100, 100, 255, 0.5)";
        context.lineWidth = lineWidth;
        
        for(var x = worldViewLeft; x < worldViewRight; x += gridSize){
            var points = [];
            for(var y = worldViewTop; y <= worldViewBottom; y += 5){
                var displacedX = x;
                var displacedY = y;
                
                for(var i = 0; i < particleList.length; i++){
                    var p = particleList[i];
                    var dx = p.x - x;
                    var dy = p.y - y;
                    var distSq = dx*dx + dy*dy;
                    
                    if(distSq < 10000 && distSq > 100){
                        var dist = Math.sqrt(distSq);
                        var force = p.mass / distSq * (p.type === "matter" ? 1 : -1);
                        var displacement = Math.min(20, force * 1000 / dist);
                        
                        displacedX += dx * displacement / dist;
                        displacedY += dy * displacement / dist;
                    }
                }
                
                points.push({x: displacedX, y: displacedY});
            }
            
            if(points.length > 1){
                context.moveTo(points[0].x, points[0].y);
                for(var j = 1; j < points.length; j++){
                    context.lineTo(points[j].x, points[j].y);
                }
            }
        }
        context.stroke();
        
        context.beginPath();
        context.fillStyle = "rgba(150, 150, 255, 0.7)";
        for(var y = worldViewTop; y < worldViewBottom; y += gridSize){
            for(var x = worldViewLeft; x < worldViewRight; x += gridSize){
                context.moveTo(x, y);
                context.arc(x, y, 1 / zoomLevel, 0, 2 * Math.PI);
            }
        }
        context.fill();
    }

    // Draw all magnetospheres (if enabled)
    if (showMagnetospheres) {
        for (var i = 0; i < magnetosphereList.length; i++) {
            magnetosphereList[i].draw(context, zoomLevel);
        }
    }

    // Draw all particle orbits (if enabled)
    if (showOrbits) {
        context.lineWidth = 1 / zoomLevel;
        for (var i = 0; i < particleList.length; i++) {
            var p = particleList[i];
            if (p.path.length > 1) {
                context.beginPath();
                context.strokeStyle = "rgba(" + p.color[0] + "," + p.color[1] + "," + p.color[2] + ", 0.5)";
                context.moveTo(p.path[0].x, p.path[0].y);
                for (var j = 1; j < p.path.length; j++) {
                    context.lineTo(p.path[j].x, p.path[j].y);
                }
                context.stroke();
            }
        }
    }

    // Draw gravity wells (if enabled)
    if (showGravityWells) {
        for (var i = 0; i < particleList.length; i++) {
            var p = particleList[i];
            if (p.type === "matter" && p.mass > 0) {
                var maxRadius = p.radius * 10 + Math.log(p.mass) * 5;
                var numCircles = 20;
                var colorBase = p.color;

                for (var j = 1; j <= numCircles; j++) {
                    var currentRadius = maxRadius * (j / numCircles);
                    var alpha = 0.3 * (1 - (j / numCircles));

                    context.beginPath();
                    context.arc(p.x, p.y, currentRadius, 0, 2 * Math.PI);
                    context.strokeStyle = "rgba(" + colorBase[0] + "," + colorBase[1] + "," + colorBase[2] + "," + alpha + ")";
                    context.lineWidth = 1 / zoomLevel;
                    context.stroke();
                }
            }
        }
    }

    // Draw black holes with accretion disks and event horizons
    for (var i = 0; i < particleList.length; i++) {
        var p = particleList[i];
        if (p.isBlackHole) {
            // Accretion disk
            var gradient = context.createRadialGradient(
                p.x, p.y, p.eventHorizonRadius,
                p.x, p.y, p.accretionDiskRadius
            );
            gradient.addColorStop(0, "rgba(255, 100, 0, 0.8)");
            gradient.addColorStop(1, "rgba(255, 255, 0, 0.2)");
            
            context.beginPath();
            context.arc(p.x, p.y, p.accretionDiskRadius, 0, 2 * Math.PI);
            context.fillStyle = gradient;
            context.fill();

            // Event horizon
            context.beginPath();
            context.arc(p.x, p.y, p.eventHorizonRadius, 0, 2 * Math.PI);
            context.fillStyle = "rgba(0, 0, 0, 0.9)";
            context.fill();
            context.strokeStyle = "rgba(255, 255, 255, 0.5)";
            context.lineWidth = 2 / zoomLevel;
            context.stroke();

            // Jets
            context.beginPath();
            context.moveTo(p.x, p.y - p.eventHorizonRadius * 4);
            context.lineTo(p.x, p.y - p.eventHorizonRadius * 10);
            context.strokeStyle = "rgba(255, 100, 0, 0.7)";
            context.lineWidth = 3 / zoomLevel;
            context.stroke();
            
            context.beginPath();
            context.moveTo(p.x, p.y + p.eventHorizonRadius * 4);
            context.lineTo(p.x, p.y + p.eventHorizonRadius * 10);
            context.stroke();
        }
    }

    // Draw all particles
    for(var t=0;t<particleList.length;t++){
        var e=particleList[t];
        // Skip drawing if it's a black hole (we already drew it)
        if (e.isBlackHole) continue;
        
        var o=context.createRadialGradient(e.x,e.y,.75*e.radius,e.x,e.y,e.radius);
        o.addColorStop(0,"rgba("+e.color[0]+","+e.color[1]+","+e.color[2]+",1.0)");
        o.addColorStop(1,"rgba("+e.color[0]+","+e.color[1]+","+e.color[2]+",0)");

        context.beginPath();
        context.arc(e.x,e.y,e.radius,0,2*Math.PI);
        context.closePath();
        context.fillStyle=e.radius<3?"#"+e.color[3]:o;
        context.fill();

        if(showParticleNames&&e.name){
            context.fillStyle="#ffffff";
            context.font=(10 / zoomLevel) + "px Arial";
            context.textAlign="center";
            context.fillText(e.name,e.x,e.y-e.radius-5 / zoomLevel);
        }

        if(showParticleMass){
            context.fillStyle="#ffffff";
            context.font=(8 / zoomLevel) + "px Arial";
            context.textAlign="center";
            var massText = e.mass < 10000 ? e.mass.toFixed(0) : e.mass.toExponential(1);
            context.fillText("Mass: " + massText, e.x, e.y + e.radius + (showParticleNames ? 15 / zoomLevel : 5 / zoomLevel));
        }
    }

    context.restore();
    document.getElementById("particleCount").innerText = "Particles: " + particleList.length;
}
