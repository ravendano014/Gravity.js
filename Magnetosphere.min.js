function Magnetosphere(particle, strength, color) {
    this.particle = particle;
    this.strength = strength;
    this.color = color || "rgba(0, 100, 255, 0.2)";
    this.pulsePhase = 0;

    this.draw = function(context, zoomLevel) {
        // Pulsing effect for neutron stars
        if (this.particle.type === "neutron") {
            this.pulsePhase = (this.pulsePhase + 0.05) % (2 * Math.PI);
            var pulseFactor = 0.9 + 0.1 * Math.sin(this.pulsePhase * 3);
        } else {
            var pulseFactor = 1.0;
        }

        // Draw magnetosphere
        var radius = this.particle.radius * 10 + this.strength / 100 * pulseFactor;
        
        // Create gradient for magnetosphere
        var gradient = context.createRadialGradient(
            this.particle.x, this.particle.y, this.particle.radius * 2,
            this.particle.x, this.particle.y, radius
        );
        gradient.addColorStop(0, this.color);
        gradient.addColorStop(1, "rgba(0, 0, 0, 0)");
        
        context.beginPath();
        context.arc(this.particle.x, this.particle.y, radius, 0, 2 * Math.PI);
        context.fillStyle = gradient;
        context.fill();
        
        // Draw field lines
        if (this.particle.type === "neutron") {
            context.strokeStyle = "rgba(0, 200, 255, 0.5)";
        } else {
            context.strokeStyle = "rgba(0, 100, 255, 0.8)";
        }
        context.lineWidth = 1 / zoomLevel;
        
        var numLines = 12;
        for (var i = 0; i < numLines; i++) {
            var angle = (i / numLines) * Math.PI * 2;
            var startRadius = this.particle.radius * 1.5;
            var endRadius = radius * 0.9;
            var midRadius = radius * 0.6;
            var curveFactor = 0.3;
            
            context.beginPath();
            context.moveTo(
                this.particle.x + Math.cos(angle) * startRadius,
                this.particle.y + Math.sin(angle) * startRadius
            );
            
            context.bezierCurveTo(
                this.particle.x + Math.cos(angle) * midRadius * (1 + curveFactor * Math.cos(angle)),
                this.particle.y + Math.sin(angle) * midRadius * (1 + curveFactor * Math.sin(angle)),
                this.particle.x + Math.cos(angle) * midRadius * (1 + curveFactor * Math.cos(angle)),
                this.particle.y + Math.sin(angle) * midRadius * (1 + curveFactor * Math.sin(angle)),
                this.particle.x + Math.cos(angle) * endRadius,
                this.particle.y + Math.sin(angle) * endRadius
            );
            
            context.stroke();
        }
    };
}
